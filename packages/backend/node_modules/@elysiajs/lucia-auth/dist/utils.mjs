// src/utils.ts
import { Elysia } from "elysia";
var createOAuth = (auth, createProvider, name, sessionName, defaultCreateUser) => (config) => {
  const {
    path = `/${name}`,
    callback = `/${name}/callback`,
    createUser: createNewUser = defaultCreateUser,
    hook: _hook = {},
    cookie,
    ...init
  } = config;
  const hook = _hook;
  const provider = createProvider(auth, init);
  return new Elysia({
    name: `@elysiajs/lucia-auth/${name}`,
    seed: config
  }).get(
    path,
    async function oauthRequest({ cookie: { oauthState }, redirect }) {
      const [url, state] = await provider.getAuthorizationUrl();
      oauthState.value = state;
      oauthState.set({
        path: "/",
        sameSite: true,
        httpOnly: true,
        maxAge: 3600
      });
      return redirect(url.toString());
    },
    hook.redirect
  ).get(
    callback,
    async function oauthCallback({
      set,
      query,
      query: { code, state },
      cookie: cookie2,
      cookie: { oauthState }
    }) {
      if (state !== oauthState.value)
        throw new Error("Invalid state");
      const callback2 = await provider.validateCallback(
        code
      );
      const { getExistingUser, createUser, createKey } = callback2;
      const userData = callback2[`${name}User`];
      const handleCreateUser = async () => {
        const { id, ...attributes } = (
          // @ts-ignore
          await createNewUser(userData)
        );
        await createUser({
          // @ts-ignore
          id,
          attributes
        });
        return {
          userId: id,
          ...attributes
        };
      };
      const user = await getExistingUser() ?? await handleCreateUser();
      if (!user?.userId)
        return set.status = "Internal Server Error";
      const { sessionId } = await auth.createSession({
        userId: user.userId,
        attributes: {}
      });
      cookie2[sessionName].value = sessionId;
      oauthState.remove();
      return userData;
    },
    // @ts-ignore
    hook.callback
  );
};
var createOAuthWithPKCE = (auth, createProvider, name, sessionName, defaultCreateUser) => (config) => {
  const {
    path = `/${name}`,
    callback = `/${name}/callback`,
    hook = {},
    createUser: createNewUser = defaultCreateUser,
    ...init
  } = config;
  const provider = createProvider(auth, init);
  return new Elysia({
    name: `@elysiajs/lucia-auth/${name}`,
    seed: config
  }).get(
    path,
    async ({
      cookie: { oauthState, oauthVerifier },
      redirect,
      set
    }) => {
      const [url, verifier, state] = await provider.getAuthorizationUrl();
      oauthVerifier.set({
        value: verifier,
        path: "/",
        sameSite: true,
        httpOnly: true,
        maxAge: 3600
      });
      oauthState.set({
        value: state,
        path: "/",
        sameSite: true,
        httpOnly: true,
        maxAge: 3600
      });
      return redirect(url.toString());
    },
    hook.redirect
  ).get(
    callback,
    async ({
      set,
      query,
      query: { code, state },
      cookie,
      cookie: { oauthState, oauthVerifier }
    }) => {
      if (state !== oauthState.value)
        throw new Error("Invalid state");
      if (state !== oauthVerifier.value)
        throw new Error("Invalid oauth verifier");
      const callback2 = await provider.validateCallback(
        code,
        oauthVerifier.value
      );
      const { getExistingUser, createUser, createKey } = callback2;
      const userData = callback2[`${name}User`];
      const handleCreateUser = async () => {
        const { id, ...attributes } = (
          // @ts-ignore
          await createNewUser(userData)
        );
        await createUser({
          // @ts-ignore
          id,
          attributes
        });
        return {
          userId: id,
          ...attributes
        };
      };
      const user = await getExistingUser() ?? await handleCreateUser();
      if (!user?.userId)
        return set.status = "Internal Server Error";
      const { sessionId } = await auth.createSession({
        userId: user.userId,
        attributes: {}
      });
      cookie[sessionName].value = sessionId;
      oauthState.remove();
      return userData;
    },
    // @ts-ignore
    hook.callback
  );
};
var InvalidSession = class extends Error {
  constructor(message = "Unauthorized") {
    super(message);
    this.message = message;
    this.status = 401;
  }
};
export {
  InvalidSession,
  createOAuth,
  createOAuthWithPKCE
};
