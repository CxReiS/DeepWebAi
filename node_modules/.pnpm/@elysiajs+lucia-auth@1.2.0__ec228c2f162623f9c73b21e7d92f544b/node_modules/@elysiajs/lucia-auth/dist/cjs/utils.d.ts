import { Elysia, type LocalHook } from 'elysia';
import { type lucia } from 'lucia';
import type { CookieOptions } from 'elysia';
import type { OAuth2ProviderAuth, OAuth2ProviderAuthWithPKCE } from '@lucia-auth/oauth';
export type Prettify<T extends Record<string, unknown>> = {
    [K in keyof T]: T[K];
};
type MaybePromise<T> = T | Promise<T>;
export declare const createOAuth: <const Name extends string, const AuthConstructor extends (...a: any[]) => OAuth2ProviderAuth>(auth: ReturnType<typeof lucia>, createProvider: AuthConstructor, name: Name, sessionName: string, defaultCreateUser: (user: Awaited<ReturnType<ReturnType<AuthConstructor>["validateCallback"]>>[`${Name}User`]) => MaybePromise<Record<string, unknown> & {
    id: string | number;
}>) => <const Path extends string = `/${Name}`, const Callback extends string = `${Path}/callback`>(config: Prettify<Parameters<AuthConstructor>[1] & {
    path?: Path;
    callback?: Callback;
    createUser?: (user: Awaited<ReturnType<ReturnType<AuthConstructor>["validateCallback"]>>[`${Name}User`]) => MaybePromise<Record<string, unknown> & {
        id: string | number;
    }>;
    hook?: {
        redirect?: LocalHook<any, any, any, any, any, any, any>;
        callback?: LocalHook<any, any, any, any, any, any, any>;
    };
    cookie?: {
        state?: CookieOptions;
        session?: CookieOptions;
    };
}>) => Elysia<"", false, {
    decorator: {};
    store: {};
    derive: {};
    resolve: {};
}, {
    type: {};
    error: {};
}, {
    schema: {};
    macro: {};
    macroFn: {};
}, {
    [x: string]: {
        get: {
            body: unknown;
            params: { [Param in import("elysia/dist/types").GetPathParameter<(Parameters<AuthConstructor>[1] & {
                path?: Path;
                callback?: Callback;
                createUser?: (user: Awaited<ReturnType<ReturnType<AuthConstructor>["validateCallback"]>>[`${Name}User`]) => MaybePromise<Record<string, unknown> & {
                    id: string | number;
                }>;
                hook?: {
                    redirect?: LocalHook<any, any, any, any, any, any, any>;
                    callback?: LocalHook<any, any, any, any, any, any, any>;
                };
                cookie?: {
                    state?: CookieOptions;
                    session?: CookieOptions;
                };
            })[string]> as Param extends `${string}?` ? never : Param]: string; } & { [Param_1 in import("elysia/dist/types").GetPathParameter<(Parameters<AuthConstructor>[1] & {
                path?: Path;
                callback?: Callback;
                createUser?: (user: Awaited<ReturnType<ReturnType<AuthConstructor>["validateCallback"]>>[`${Name}User`]) => MaybePromise<Record<string, unknown> & {
                    id: string | number;
                }>;
                hook?: {
                    redirect?: LocalHook<any, any, any, any, any, any, any>;
                    callback?: LocalHook<any, any, any, any, any, any, any>;
                };
                cookie?: {
                    state?: CookieOptions;
                    session?: CookieOptions;
                };
            })[string]> as Param_1 extends `${infer OptionalParam}?` ? OptionalParam : never]?: string | undefined; } extends infer T ? { [K in keyof T]: ({ [Param in import("elysia/dist/types").GetPathParameter<(Parameters<AuthConstructor>[1] & {
                path?: Path;
                callback?: Callback;
                createUser?: (user: Awaited<ReturnType<ReturnType<AuthConstructor>["validateCallback"]>>[`${Name}User`]) => MaybePromise<Record<string, unknown> & {
                    id: string | number;
                }>;
                hook?: {
                    redirect?: LocalHook<any, any, any, any, any, any, any>;
                    callback?: LocalHook<any, any, any, any, any, any, any>;
                };
                cookie?: {
                    state?: CookieOptions;
                    session?: CookieOptions;
                };
            })[string]> as Param extends `${string}?` ? never : Param]: string; } & { [Param_1 in import("elysia/dist/types").GetPathParameter<(Parameters<AuthConstructor>[1] & {
                path?: Path;
                callback?: Callback;
                createUser?: (user: Awaited<ReturnType<ReturnType<AuthConstructor>["validateCallback"]>>[`${Name}User`]) => MaybePromise<Record<string, unknown> & {
                    id: string | number;
                }>;
                hook?: {
                    redirect?: LocalHook<any, any, any, any, any, any, any>;
                    callback?: LocalHook<any, any, any, any, any, any, any>;
                };
                cookie?: {
                    state?: CookieOptions;
                    session?: CookieOptions;
                };
            })[string]> as Param_1 extends `${infer OptionalParam}?` ? OptionalParam : never]?: string | undefined; })[K]; } : never;
            query: unknown;
            headers: unknown;
            response: {
                [x: string]: any;
                200: any;
            };
        };
    };
} & {
    [x: string]: {
        get: {
            body: unknown;
            params: { [Param in import("elysia/dist/types").GetPathParameter<(Parameters<AuthConstructor>[1] & {
                path?: Path;
                callback?: Callback;
                createUser?: (user: Awaited<ReturnType<ReturnType<AuthConstructor>["validateCallback"]>>[`${Name}User`]) => MaybePromise<Record<string, unknown> & {
                    id: string | number;
                }>;
                hook?: {
                    redirect?: LocalHook<any, any, any, any, any, any, any>;
                    callback?: LocalHook<any, any, any, any, any, any, any>;
                };
                cookie?: {
                    state?: CookieOptions;
                    session?: CookieOptions;
                };
            })[string]> as Param extends `${string}?` ? never : Param]: string; } & { [Param_1 in import("elysia/dist/types").GetPathParameter<(Parameters<AuthConstructor>[1] & {
                path?: Path;
                callback?: Callback;
                createUser?: (user: Awaited<ReturnType<ReturnType<AuthConstructor>["validateCallback"]>>[`${Name}User`]) => MaybePromise<Record<string, unknown> & {
                    id: string | number;
                }>;
                hook?: {
                    redirect?: LocalHook<any, any, any, any, any, any, any>;
                    callback?: LocalHook<any, any, any, any, any, any, any>;
                };
                cookie?: {
                    state?: CookieOptions;
                    session?: CookieOptions;
                };
            })[string]> as Param_1 extends `${infer OptionalParam}?` ? OptionalParam : never]?: string | undefined; } extends infer T ? { [K in keyof T]: ({ [Param in import("elysia/dist/types").GetPathParameter<(Parameters<AuthConstructor>[1] & {
                path?: Path;
                callback?: Callback;
                createUser?: (user: Awaited<ReturnType<ReturnType<AuthConstructor>["validateCallback"]>>[`${Name}User`]) => MaybePromise<Record<string, unknown> & {
                    id: string | number;
                }>;
                hook?: {
                    redirect?: LocalHook<any, any, any, any, any, any, any>;
                    callback?: LocalHook<any, any, any, any, any, any, any>;
                };
                cookie?: {
                    state?: CookieOptions;
                    session?: CookieOptions;
                };
            })[string]> as Param extends `${string}?` ? never : Param]: string; } & { [Param_1 in import("elysia/dist/types").GetPathParameter<(Parameters<AuthConstructor>[1] & {
                path?: Path;
                callback?: Callback;
                createUser?: (user: Awaited<ReturnType<ReturnType<AuthConstructor>["validateCallback"]>>[`${Name}User`]) => MaybePromise<Record<string, unknown> & {
                    id: string | number;
                }>;
                hook?: {
                    redirect?: LocalHook<any, any, any, any, any, any, any>;
                    callback?: LocalHook<any, any, any, any, any, any, any>;
                };
                cookie?: {
                    state?: CookieOptions;
                    session?: CookieOptions;
                };
            })[string]> as Param_1 extends `${infer OptionalParam}?` ? OptionalParam : never]?: string | undefined; })[K]; } : never;
            query: unknown;
            headers: unknown;
            response: {
                [x: string]: any;
                200: any;
            };
        };
    };
}, {
    derive: {};
    resolve: {};
    schema: {};
}, {
    derive: {};
    resolve: {};
    schema: {};
}>;
export declare const createOAuthWithPKCE: <Name extends string, const AuthConstructor extends (...a: any[]) => OAuth2ProviderAuthWithPKCE>(auth: ReturnType<typeof lucia>, createProvider: AuthConstructor, name: Name, sessionName: string, defaultCreateUser?: (user: Awaited<ReturnType<ReturnType<AuthConstructor>["validateCallback"]>>[`${Name}User`]) => MaybePromise<Record<string, unknown> & {
    id: string | number;
}>) => <const Path extends string = `/${Name}`, const Callback extends string = `${Path}/callback`>(config: {
    path?: Path;
    callback?: Callback;
    createUser?: (user: Awaited<ReturnType<ReturnType<AuthConstructor>["validateCallback"]>>[`${Name}User`]) => MaybePromise<Record<string, unknown> & {
        id: string | number;
    }>;
    hook?: {
        redirect?: LocalHook<any, any, any, any, any, any, any>;
        callback?: LocalHook<any, any, any, any, any, any, any>;
    };
    cookie?: {
        state?: CookieOptions;
        session?: CookieOptions;
    };
    config: Parameters<AuthConstructor>[1];
}) => Elysia<"", false, {
    decorator: {};
    store: {};
    derive: {};
    resolve: {};
}, {
    type: {};
    error: {};
}, {
    schema: {};
    macro: {};
    macroFn: {};
}, ({} & (import("elysia").CreateEden<`${Path extends "/" ? "/index" : Path extends "" ? Path : Path extends `/${string}` ? Path : Path}`, {
    get: {
        body: unknown;
        params: { [Param in import("elysia/dist/types").GetPathParameter<Path> | import("elysia/dist/types").GetPathParameter<`/${Name}`> as Param extends `${string}?` ? never : Param]: string; } & { [Param_1 in import("elysia/dist/types").GetPathParameter<Path> | import("elysia/dist/types").GetPathParameter<`/${Name}`> as Param_1 extends `${infer OptionalParam}?` ? OptionalParam : never]?: string | undefined; } extends infer T ? { [K in keyof T]: ({ [Param in import("elysia/dist/types").GetPathParameter<Path> | import("elysia/dist/types").GetPathParameter<`/${Name}`> as Param extends `${string}?` ? never : Param]: string; } & { [Param_1 in import("elysia/dist/types").GetPathParameter<Path> | import("elysia/dist/types").GetPathParameter<`/${Name}`> as Param_1 extends `${infer OptionalParam}?` ? OptionalParam : never]?: string | undefined; })[K]; } : never;
        query: unknown;
        headers: unknown;
        response: {
            [x: string]: any;
            200: any;
        };
    };
}> | import("elysia").CreateEden<`${`/${Name}` extends infer T_1 ? T_1 extends `/${Name}` ? T_1 extends "/" ? "/index" : T_1 extends "" ? T_1 : T_1 extends `/${string}` ? T_1 : T_1 : never : never}`, {
    get: {
        body: unknown;
        params: { [Param in import("elysia/dist/types").GetPathParameter<Path> | import("elysia/dist/types").GetPathParameter<`/${Name}`> as Param extends `${string}?` ? never : Param]: string; } & { [Param_1 in import("elysia/dist/types").GetPathParameter<Path> | import("elysia/dist/types").GetPathParameter<`/${Name}`> as Param_1 extends `${infer OptionalParam}?` ? OptionalParam : never]?: string | undefined; } extends infer T ? { [K in keyof T]: ({ [Param in import("elysia/dist/types").GetPathParameter<Path> | import("elysia/dist/types").GetPathParameter<`/${Name}`> as Param extends `${string}?` ? never : Param]: string; } & { [Param_1 in import("elysia/dist/types").GetPathParameter<Path> | import("elysia/dist/types").GetPathParameter<`/${Name}`> as Param_1 extends `${infer OptionalParam}?` ? OptionalParam : never]?: string | undefined; })[K]; } : never;
        query: unknown;
        headers: unknown;
        response: {
            [x: string]: any;
            200: any;
        };
    };
}>)) & (import("elysia").CreateEden<`${Callback extends "/" ? "/index" : Callback extends "" ? Callback : Callback extends `/${string}` ? Callback : Callback}`, {
    get: {
        body: unknown;
        params: { [Param_2 in import("elysia/dist/types").GetPathParameter<Callback> | import("elysia/dist/types").GetPathParameter<`/${Name}/callback`> as Param_2 extends `${string}?` ? never : Param_2]: string; } & { [Param_3 in import("elysia/dist/types").GetPathParameter<Callback> | import("elysia/dist/types").GetPathParameter<`/${Name}/callback`> as Param_3 extends `${infer OptionalParam}?` ? OptionalParam : never]?: string | undefined; } extends infer T_2 ? { [K_1 in keyof T_2]: ({ [Param_2 in import("elysia/dist/types").GetPathParameter<Callback> | import("elysia/dist/types").GetPathParameter<`/${Name}/callback`> as Param_2 extends `${string}?` ? never : Param_2]: string; } & { [Param_3 in import("elysia/dist/types").GetPathParameter<Callback> | import("elysia/dist/types").GetPathParameter<`/${Name}/callback`> as Param_3 extends `${infer OptionalParam}?` ? OptionalParam : never]?: string | undefined; })[K_1]; } : never;
        query: unknown;
        headers: unknown;
        response: {
            [x: string]: any;
            200: any;
        };
    };
}> | import("elysia").CreateEden<`${`/${Name}/callback` extends infer T_3 ? T_3 extends `/${Name}/callback` ? T_3 extends "/" ? "/index" : T_3 extends "" ? T_3 : T_3 extends `/${string}` ? T_3 : T_3 : never : never}`, {
    get: {
        body: unknown;
        params: { [Param_2 in import("elysia/dist/types").GetPathParameter<Callback> | import("elysia/dist/types").GetPathParameter<`/${Name}/callback`> as Param_2 extends `${string}?` ? never : Param_2]: string; } & { [Param_3 in import("elysia/dist/types").GetPathParameter<Callback> | import("elysia/dist/types").GetPathParameter<`/${Name}/callback`> as Param_3 extends `${infer OptionalParam}?` ? OptionalParam : never]?: string | undefined; } extends infer T_2 ? { [K_1 in keyof T_2]: ({ [Param_2 in import("elysia/dist/types").GetPathParameter<Callback> | import("elysia/dist/types").GetPathParameter<`/${Name}/callback`> as Param_2 extends `${string}?` ? never : Param_2]: string; } & { [Param_3 in import("elysia/dist/types").GetPathParameter<Callback> | import("elysia/dist/types").GetPathParameter<`/${Name}/callback`> as Param_3 extends `${infer OptionalParam}?` ? OptionalParam : never]?: string | undefined; })[K_1]; } : never;
        query: unknown;
        headers: unknown;
        response: {
            [x: string]: any;
            200: any;
        };
    };
}>), {
    derive: {};
    resolve: {};
    schema: {};
}, {
    derive: {};
    resolve: {};
    schema: {};
}>;
export declare class InvalidSession extends Error {
    message: string;
    status: number;
    constructor(message?: string);
}
export {};
