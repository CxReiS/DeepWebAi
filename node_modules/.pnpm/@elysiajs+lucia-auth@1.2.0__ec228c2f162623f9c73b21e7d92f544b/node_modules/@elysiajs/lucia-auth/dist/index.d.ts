import { Elysia, t, type LocalHook, type CookieOptions } from 'elysia';
import { type Auth, type Configuration } from 'lucia';
import { InvalidSession, type Prettify } from './utils';
export interface LuciaConfig<Name extends string, SessionName extends string> extends Omit<Configuration, 'env'> {
    name: Name;
    session: SessionName;
    env?: Configuration['env'];
    cookie?: Parameters<typeof t.Cookie>[1];
    key?: string;
}
export declare const Lucia: <const Attributes extends Record<string, unknown> = Record<string, unknown>, const Name extends string = "user", const SessionName extends string = "session">(configuration: LuciaConfig<Name, SessionName>) => {
    lucia: Auth<{
        env: "DEV" | "PROD";
        name: Name;
        session: SessionName;
        cookie?: Parameters<typeof t.Cookie>[1];
        key?: string;
        middleware?: import("lucia").Middleware | undefined;
        getUserAttributes?: ((databaseUser: import("lucia").UserSchema) => {}) | undefined;
        getSessionAttributes?: ((databaseSession: import("lucia").SessionSchema) => {}) | undefined;
        sessionCookie?: import("lucia/dist/auth/cookie").SessionCookieConfiguration | undefined;
        adapter: {
            user: import("lucia").InitializeAdapter<import("lucia").Adapter>;
            session: import("lucia").InitializeAdapter<import("lucia").SessionAdapter>;
        } | import("lucia").InitializeAdapter<Readonly<{
            getSessionAndUser?: (sessionId: string) => Promise<[import("lucia").SessionSchema, import("lucia").UserSchema] | [null, null]>;
        } & Readonly<{
            getSession: (sessionId: string) => Promise<import("lucia").SessionSchema | null>;
            getSessionsByUserId: (userId: string) => Promise<import("lucia").SessionSchema[]>;
            setSession: (session: import("lucia").SessionSchema) => Promise<void>;
            updateSession: (sessionId: string, partialSession: Partial<import("lucia").SessionSchema>) => Promise<void>;
            deleteSession: (sessionId: string) => Promise<void>;
            deleteSessionsByUserId: (userId: string) => Promise<void>;
        }> & Readonly<{
            getUser: (userId: string) => Promise<import("lucia").UserSchema | null>;
            setUser: (user: import("lucia").UserSchema, key: import("lucia").KeySchema | null) => Promise<void>;
            updateUser: (userId: string, partialUser: Partial<import("lucia").UserSchema>) => Promise<void>;
            deleteUser: (userId: string) => Promise<void>;
            getKey: (keyId: string) => Promise<import("lucia").KeySchema | null>;
            getKeysByUserId: (userId: string) => Promise<import("lucia").KeySchema[]>;
            setKey: (key: import("lucia").KeySchema) => Promise<void>;
            updateKey: (keyId: string, partialKey: Partial<import("lucia").KeySchema>) => Promise<void>;
            deleteKey: (keyId: string) => Promise<void>;
            deleteKeysByUserId: (userId: string) => Promise<void>;
        }>>>;
        csrfProtection?: (boolean | {
            host?: string;
            hostHeader?: string;
            allowedSubDomains?: string[] | "*";
        }) | undefined;
        sessionExpiresIn?: {
            activePeriod: number;
            idlePeriod: number;
        } | undefined;
        passwordHash?: {
            generate: (password: string) => string | Promise<string>;
            validate: (password: string, hash: string) => boolean | Promise<boolean>;
        } | undefined;
        experimental?: {
            debugMode?: boolean;
        } | undefined;
    }>;
    elysia: Elysia<"", false, {
        decorator: {};
        store: {};
        derive: {
            readonly [x: string]: {
                readonly auth: Auth<{
                    env: "DEV" | "PROD";
                    name: Name;
                    session: SessionName;
                    cookie?: Parameters<typeof t.Cookie>[1];
                    key?: string;
                    middleware?: import("lucia").Middleware | undefined;
                    getUserAttributes?: ((databaseUser: import("lucia").UserSchema) => {}) | undefined;
                    getSessionAttributes?: ((databaseSession: import("lucia").SessionSchema) => {}) | undefined;
                    sessionCookie?: import("lucia/dist/auth/cookie").SessionCookieConfiguration | undefined;
                    adapter: {
                        user: import("lucia").InitializeAdapter<import("lucia").Adapter>;
                        session: import("lucia").InitializeAdapter<import("lucia").SessionAdapter>;
                    } | import("lucia").InitializeAdapter<Readonly<{
                        getSessionAndUser?: (sessionId: string) => Promise<[import("lucia").SessionSchema, import("lucia").UserSchema] | [null, null]>;
                    } & Readonly<{
                        getSession: (sessionId: string) => Promise<import("lucia").SessionSchema | null>;
                        getSessionsByUserId: (userId: string) => Promise<import("lucia").SessionSchema[]>;
                        setSession: (session: import("lucia").SessionSchema) => Promise<void>;
                        updateSession: (sessionId: string, partialSession: Partial<import("lucia").SessionSchema>) => Promise<void>;
                        deleteSession: (sessionId: string) => Promise<void>;
                        deleteSessionsByUserId: (userId: string) => Promise<void>;
                    }> & Readonly<{
                        getUser: (userId: string) => Promise<import("lucia").UserSchema | null>;
                        setUser: (user: import("lucia").UserSchema, key: import("lucia").KeySchema | null) => Promise<void>;
                        updateUser: (userId: string, partialUser: Partial<import("lucia").UserSchema>) => Promise<void>;
                        deleteUser: (userId: string) => Promise<void>;
                        getKey: (keyId: string) => Promise<import("lucia").KeySchema | null>;
                        getKeysByUserId: (userId: string) => Promise<import("lucia").KeySchema[]>;
                        setKey: (key: import("lucia").KeySchema) => Promise<void>;
                        updateKey: (keyId: string, partialKey: Partial<import("lucia").KeySchema>) => Promise<void>;
                        deleteKey: (keyId: string) => Promise<void>;
                        deleteKeysByUserId: (userId: string) => Promise<void>;
                    }>>>;
                    csrfProtection?: (boolean | {
                        host?: string;
                        hostHeader?: string;
                        allowedSubDomains?: string[] | "*";
                    }) | undefined;
                    sessionExpiresIn?: {
                        activePeriod: number;
                        idlePeriod: number;
                    } | undefined;
                    passwordHash?: {
                        generate: (password: string) => string | Promise<string>;
                        validate: (password: string, hash: string) => boolean | Promise<boolean>;
                    } | undefined;
                    experimental?: {
                        debugMode?: boolean;
                    } | undefined;
                }>;
                readonly id: Promise<any>;
                readonly profile: Promise<Attributes>;
                readonly signUp: ({ username, password, ...rest }: {
                    username: string;
                    password: string;
                } & Partial<Attributes>, { createSession }?: {
                    /**
                     * @default false
                     */
                    createSession: boolean;
                }) => Promise<any>;
                readonly signIn: (user: {
                    username: string;
                    password: string;
                }) => Promise<void>;
                readonly updateUser: (attributes: Lucia.DatabaseUserAttributes) => Promise<void>;
                readonly updatePassword: (username: string, password: string) => Promise<void>;
                readonly refresh: () => Promise<void>;
                readonly signOut: (type?: "all" | "unused" | "current") => Promise<void>;
                readonly delete: ({ confirm }: {
                    confirm: "DELETE ALL USER DATA and is not reversible";
                }) => Promise<void>;
                readonly validate: () => Promise<void>;
            };
        };
        resolve: {};
    }, {
        type: {};
        error: {
            readonly INVALID_SESSION: InvalidSession;
        };
    }, {
        schema: {};
        macro: Partial<{
            readonly isSignIn: boolean | undefined;
        }>;
        macroFn: {
            readonly isSignIn: (value: boolean) => void;
        };
    }, {}, {
        derive: {};
        resolve: {};
        schema: {};
    }, {
        derive: {};
        resolve: {};
        schema: {};
    }>;
    oauth: {
        auth0: <const Path extends string = "/auth0", const Callback extends string = `${Path}/callback`>(config: Prettify<{
            clientId: string;
            clientSecret: string;
            appDomain: string;
            redirectUri: string;
            scope?: string[];
        } & {
            path?: Path | undefined;
            callback?: Callback | undefined;
            createUser?: ((user: import("@lucia-auth/oauth/providers").Auth0User) => (Record<string, unknown> & {
                id: string | number;
            }) | Promise<Record<string, unknown> & {
                id: string | number;
            }>) | undefined;
            hook?: {
                redirect?: LocalHook<any, any, any, any, any, any, any>;
                callback?: LocalHook<any, any, any, any, any, any, any>;
            };
            cookie?: {
                state?: CookieOptions;
                session?: CookieOptions;
            };
        }>) => Elysia<"", false, {
            decorator: {};
            store: {};
            derive: {};
            resolve: {};
        }, {
            type: {};
            error: {};
        }, {
            schema: {};
            macro: {};
            macroFn: {};
        }, {
            [x: string]: {
                get: {
                    body: unknown;
                    params: {};
                    query: unknown;
                    headers: unknown;
                    response: {
                        [x: string]: any;
                        200: any;
                    };
                };
            };
        } & {
            [x: string]: {
                get: {
                    body: unknown;
                    params: {};
                    query: unknown;
                    headers: unknown;
                    response: {
                        [x: string]: any;
                        200: any;
                    };
                };
            };
        }, {
            derive: {};
            resolve: {};
            schema: {};
        }, {
            derive: {};
            resolve: {};
            schema: {};
        }>;
        apple: <const Path extends string = "/apple", const Callback extends string = `${Path}/callback`>(config: Prettify<{
            redirectUri: string;
            clientId: string;
            teamId: string;
            keyId: string;
            certificate: string;
            responseMode?: "query" | "form_post";
            scope?: string[];
        } & {
            path?: Path | undefined;
            callback?: Callback | undefined;
            createUser?: ((user: import("@lucia-auth/oauth/providers").AppleUser) => (Record<string, unknown> & {
                id: string | number;
            }) | Promise<Record<string, unknown> & {
                id: string | number;
            }>) | undefined;
            hook?: {
                redirect?: LocalHook<any, any, any, any, any, any, any>;
                callback?: LocalHook<any, any, any, any, any, any, any>;
            };
            cookie?: {
                state?: CookieOptions;
                session?: CookieOptions;
            };
        }>) => Elysia<"", false, {
            decorator: {};
            store: {};
            derive: {};
            resolve: {};
        }, {
            type: {};
            error: {};
        }, {
            schema: {};
            macro: {};
            macroFn: {};
        }, {
            [x: string]: {
                get: {
                    body: unknown;
                    params: {};
                    query: unknown;
                    headers: unknown;
                    response: {
                        [x: string]: any;
                        200: any;
                    };
                };
            };
        } & {
            [x: string]: {
                get: {
                    body: unknown;
                    params: {};
                    query: unknown;
                    headers: unknown;
                    response: {
                        [x: string]: any;
                        200: any;
                    };
                };
            };
        }, {
            derive: {};
            resolve: {};
            schema: {};
        }, {
            derive: {};
            resolve: {};
            schema: {};
        }>;
        azure: <const Path extends string = "/azureAD", const Callback_1 extends string = `${Path}/callback`>(config: {
            path?: Path | undefined;
            callback?: Callback_1 | undefined;
            createUser?: ((user: import("@lucia-auth/oauth/providers").AzureADUser) => (Record<string, unknown> & {
                id: string | number;
            }) | Promise<Record<string, unknown> & {
                id: string | number;
            }>) | undefined;
            hook?: {
                redirect?: LocalHook<any, any, any, any, any, any, any>;
                callback?: LocalHook<any, any, any, any, any, any, any>;
            };
            cookie?: {
                state?: CookieOptions;
                session?: CookieOptions;
            };
            config: {
                clientId: string;
                clientSecret: string;
                tenant: string;
                redirectUri: string;
                scope?: string[];
            };
        }) => Elysia<"", false, {
            decorator: {};
            store: {};
            derive: {};
            resolve: {};
        }, {
            type: {};
            error: {};
        }, {
            schema: {};
            macro: {};
            macroFn: {};
        }, ({
            azureAD: {
                get: {
                    body: unknown;
                    params: { [Param in import("elysia/dist/types").GetPathParameter<Path> as Param extends `${string}?` ? never : Param]: string; } & { [Param_1 in import("elysia/dist/types").GetPathParameter<Path> as Param_1 extends `${infer OptionalParam}?` ? OptionalParam : never]?: string | undefined; } extends infer T ? { [K in keyof T]: ({ [Param in import("elysia/dist/types").GetPathParameter<Path> as Param extends `${string}?` ? never : Param]: string; } & { [Param_1 in import("elysia/dist/types").GetPathParameter<Path> as Param_1 extends `${infer OptionalParam}?` ? OptionalParam : never]?: string | undefined; })[K]; } : never;
                    query: unknown;
                    headers: unknown;
                    response: {
                        [x: string]: any;
                        200: any;
                    };
                };
            };
        } | ({} & import("elysia").CreateEden<`${Path extends "/" ? "/index" : Path extends "" ? Path : Path extends `/${string}` ? Path : Path}`, {
            get: {
                body: unknown;
                params: { [Param in import("elysia/dist/types").GetPathParameter<Path> as Param extends `${string}?` ? never : Param]: string; } & { [Param_1 in import("elysia/dist/types").GetPathParameter<Path> as Param_1 extends `${infer OptionalParam}?` ? OptionalParam : never]?: string | undefined; } extends infer T ? { [K in keyof T]: ({ [Param in import("elysia/dist/types").GetPathParameter<Path> as Param extends `${string}?` ? never : Param]: string; } & { [Param_1 in import("elysia/dist/types").GetPathParameter<Path> as Param_1 extends `${infer OptionalParam}?` ? OptionalParam : never]?: string | undefined; })[K]; } : never;
                query: unknown;
                headers: unknown;
                response: {
                    [x: string]: any;
                    200: any;
                };
            };
        }>)) & (import("elysia").CreateEden<`${Callback_1 extends "/" ? "/index" : Callback_1 extends "" ? Callback_1 : Callback_1 extends `/${string}` ? Callback_1 : Callback_1}`, {
            get: {
                body: unknown;
                params: { [Param_2 in import("elysia/dist/types").GetPathParameter<Callback_1> as Param_2 extends `${string}?` ? never : Param_2]: string; } & { [Param_3 in import("elysia/dist/types").GetPathParameter<Callback_1> as Param_3 extends `${infer OptionalParam}?` ? OptionalParam : never]?: string | undefined; } extends infer T_1 ? { [K_1 in keyof T_1]: ({ [Param_2 in import("elysia/dist/types").GetPathParameter<Callback_1> as Param_2 extends `${string}?` ? never : Param_2]: string; } & { [Param_3 in import("elysia/dist/types").GetPathParameter<Callback_1> as Param_3 extends `${infer OptionalParam}?` ? OptionalParam : never]?: string | undefined; })[K_1]; } : never;
                query: unknown;
                headers: unknown;
                response: {
                    [x: string]: any;
                    200: any;
                };
            };
        }> | {
            azureAD: {
                callback: {
                    get: {
                        body: unknown;
                        params: { [Param_2 in import("elysia/dist/types").GetPathParameter<Callback_1> as Param_2 extends `${string}?` ? never : Param_2]: string; } & { [Param_3 in import("elysia/dist/types").GetPathParameter<Callback_1> as Param_3 extends `${infer OptionalParam}?` ? OptionalParam : never]?: string | undefined; } extends infer T_1 ? { [K_1 in keyof T_1]: ({ [Param_2 in import("elysia/dist/types").GetPathParameter<Callback_1> as Param_2 extends `${string}?` ? never : Param_2]: string; } & { [Param_3 in import("elysia/dist/types").GetPathParameter<Callback_1> as Param_3 extends `${infer OptionalParam}?` ? OptionalParam : never]?: string | undefined; })[K_1]; } : never;
                        query: unknown;
                        headers: unknown;
                        response: {
                            [x: string]: any;
                            200: any;
                        };
                    };
                };
            };
        }), {
            derive: {};
            resolve: {};
            schema: {};
        }, {
            derive: {};
            resolve: {};
            schema: {};
        }>;
        box: <const Path extends string = "/box", const Callback extends string = `${Path}/callback`>(config: Prettify<{
            clientId: string;
            clientSecret: string;
            redirectUri: string;
        } & {
            path?: Path | undefined;
            callback?: Callback | undefined;
            createUser?: ((user: import("@lucia-auth/oauth/providers").BoxUser) => (Record<string, unknown> & {
                id: string | number;
            }) | Promise<Record<string, unknown> & {
                id: string | number;
            }>) | undefined;
            hook?: {
                redirect?: LocalHook<any, any, any, any, any, any, any>;
                callback?: LocalHook<any, any, any, any, any, any, any>;
            };
            cookie?: {
                state?: CookieOptions;
                session?: CookieOptions;
            };
        }>) => Elysia<"", false, {
            decorator: {};
            store: {};
            derive: {};
            resolve: {};
        }, {
            type: {};
            error: {};
        }, {
            schema: {};
            macro: {};
            macroFn: {};
        }, {
            [x: string]: {
                get: {
                    body: unknown;
                    params: {};
                    query: unknown;
                    headers: unknown;
                    response: {
                        [x: string]: any;
                        200: any;
                    };
                };
            };
        } & {
            [x: string]: {
                get: {
                    body: unknown;
                    params: {};
                    query: unknown;
                    headers: unknown;
                    response: {
                        [x: string]: any;
                        200: any;
                    };
                };
            };
        }, {
            derive: {};
            resolve: {};
            schema: {};
        }, {
            derive: {};
            resolve: {};
            schema: {};
        }>;
        discord: <const Path extends string = "/discord", const Callback extends string = `${Path}/callback`>(config: Prettify<{
            clientId: string;
            clientSecret: string;
            scope?: string[];
            redirectUri: string;
        } & {
            path?: Path | undefined;
            callback?: Callback | undefined;
            createUser?: ((user: import("@lucia-auth/oauth/providers").DiscordUser) => (Record<string, unknown> & {
                id: string | number;
            }) | Promise<Record<string, unknown> & {
                id: string | number;
            }>) | undefined;
            hook?: {
                redirect?: LocalHook<any, any, any, any, any, any, any>;
                callback?: LocalHook<any, any, any, any, any, any, any>;
            };
            cookie?: {
                state?: CookieOptions;
                session?: CookieOptions;
            };
        }>) => Elysia<"", false, {
            decorator: {};
            store: {};
            derive: {};
            resolve: {};
        }, {
            type: {};
            error: {};
        }, {
            schema: {};
            macro: {};
            macroFn: {};
        }, {
            [x: string]: {
                get: {
                    body: unknown;
                    params: {};
                    query: unknown;
                    headers: unknown;
                    response: {
                        [x: string]: any;
                        200: any;
                    };
                };
            };
        } & {
            [x: string]: {
                get: {
                    body: unknown;
                    params: {};
                    query: unknown;
                    headers: unknown;
                    response: {
                        [x: string]: any;
                        200: any;
                    };
                };
            };
        }, {
            derive: {};
            resolve: {};
            schema: {};
        }, {
            derive: {};
            resolve: {};
            schema: {};
        }>;
        dropbox: <const Path extends string = "/dropbox", const Callback extends string = `${Path}/callback`>(config: Prettify<{
            clientId: string;
            clientSecret: string;
            redirectUri: string;
            scope?: string[];
            tokenAccessType?: "online" | "offline";
        } & {
            path?: Path | undefined;
            callback?: Callback | undefined;
            createUser?: ((user: import("@lucia-auth/oauth/providers").DropboxUser) => (Record<string, unknown> & {
                id: string | number;
            }) | Promise<Record<string, unknown> & {
                id: string | number;
            }>) | undefined;
            hook?: {
                redirect?: LocalHook<any, any, any, any, any, any, any>;
                callback?: LocalHook<any, any, any, any, any, any, any>;
            };
            cookie?: {
                state?: CookieOptions;
                session?: CookieOptions;
            };
        }>) => Elysia<"", false, {
            decorator: {};
            store: {};
            derive: {};
            resolve: {};
        }, {
            type: {};
            error: {};
        }, {
            schema: {};
            macro: {};
            macroFn: {};
        }, {
            [x: string]: {
                get: {
                    body: unknown;
                    params: {};
                    query: unknown;
                    headers: unknown;
                    response: {
                        [x: string]: any;
                        200: any;
                    };
                };
            };
        } & {
            [x: string]: {
                get: {
                    body: unknown;
                    params: {};
                    query: unknown;
                    headers: unknown;
                    response: {
                        [x: string]: any;
                        200: any;
                    };
                };
            };
        }, {
            derive: {};
            resolve: {};
            schema: {};
        }, {
            derive: {};
            resolve: {};
            schema: {};
        }>;
        facebook: <const Path extends string = "/facebook", const Callback extends string = `${Path}/callback`>(config: Prettify<{
            clientId: string;
            clientSecret: string;
            redirectUri: string;
            scope?: string[];
        } & {
            path?: Path | undefined;
            callback?: Callback | undefined;
            createUser?: ((user: import("@lucia-auth/oauth/providers").FacebookUser) => (Record<string, unknown> & {
                id: string | number;
            }) | Promise<Record<string, unknown> & {
                id: string | number;
            }>) | undefined;
            hook?: {
                redirect?: LocalHook<any, any, any, any, any, any, any>;
                callback?: LocalHook<any, any, any, any, any, any, any>;
            };
            cookie?: {
                state?: CookieOptions;
                session?: CookieOptions;
            };
        }>) => Elysia<"", false, {
            decorator: {};
            store: {};
            derive: {};
            resolve: {};
        }, {
            type: {};
            error: {};
        }, {
            schema: {};
            macro: {};
            macroFn: {};
        }, {
            [x: string]: {
                get: {
                    body: unknown;
                    params: {};
                    query: unknown;
                    headers: unknown;
                    response: {
                        [x: string]: any;
                        200: any;
                    };
                };
            };
        } & {
            [x: string]: {
                get: {
                    body: unknown;
                    params: {};
                    query: unknown;
                    headers: unknown;
                    response: {
                        [x: string]: any;
                        200: any;
                    };
                };
            };
        }, {
            derive: {};
            resolve: {};
            schema: {};
        }, {
            derive: {};
            resolve: {};
            schema: {};
        }>;
        github: <const Path extends string = "/github", const Callback extends string = `${Path}/callback`>(config: Prettify<{
            clientId: string;
            clientSecret: string;
            scope?: string[];
            redirectUri?: string;
        } & {
            path?: Path | undefined;
            callback?: Callback | undefined;
            createUser?: ((user: import("@lucia-auth/oauth/providers").GithubUser) => (Record<string, unknown> & {
                id: string | number;
            }) | Promise<Record<string, unknown> & {
                id: string | number;
            }>) | undefined;
            hook?: {
                redirect?: LocalHook<any, any, any, any, any, any, any>;
                callback?: LocalHook<any, any, any, any, any, any, any>;
            };
            cookie?: {
                state?: CookieOptions;
                session?: CookieOptions;
            };
        }>) => Elysia<"", false, {
            decorator: {};
            store: {};
            derive: {};
            resolve: {};
        }, {
            type: {};
            error: {};
        }, {
            schema: {};
            macro: {};
            macroFn: {};
        }, {
            [x: string]: {
                get: {
                    body: unknown;
                    params: {};
                    query: unknown;
                    headers: unknown;
                    response: {
                        [x: string]: any;
                        200: any;
                    };
                };
            };
        } & {
            [x: string]: {
                get: {
                    body: unknown;
                    params: {};
                    query: unknown;
                    headers: unknown;
                    response: {
                        [x: string]: any;
                        200: any;
                    };
                };
            };
        }, {
            derive: {};
            resolve: {};
            schema: {};
        }, {
            derive: {};
            resolve: {};
            schema: {};
        }>;
        gitlab: <const Path extends string = "/gitlab", const Callback extends string = `${Path}/callback`>(config: Prettify<{
            clientId: string;
            clientSecret: string;
            redirectUri: string;
            scope?: string[];
            serverUrl?: string;
        } & {
            path?: Path | undefined;
            callback?: Callback | undefined;
            createUser?: ((user: import("@lucia-auth/oauth/providers").GitlabUser) => (Record<string, unknown> & {
                id: string | number;
            }) | Promise<Record<string, unknown> & {
                id: string | number;
            }>) | undefined;
            hook?: {
                redirect?: LocalHook<any, any, any, any, any, any, any>;
                callback?: LocalHook<any, any, any, any, any, any, any>;
            };
            cookie?: {
                state?: CookieOptions;
                session?: CookieOptions;
            };
        }>) => Elysia<"", false, {
            decorator: {};
            store: {};
            derive: {};
            resolve: {};
        }, {
            type: {};
            error: {};
        }, {
            schema: {};
            macro: {};
            macroFn: {};
        }, {
            [x: string]: {
                get: {
                    body: unknown;
                    params: {};
                    query: unknown;
                    headers: unknown;
                    response: {
                        [x: string]: any;
                        200: any;
                    };
                };
            };
        } & {
            [x: string]: {
                get: {
                    body: unknown;
                    params: {};
                    query: unknown;
                    headers: unknown;
                    response: {
                        [x: string]: any;
                        200: any;
                    };
                };
            };
        }, {
            derive: {};
            resolve: {};
            schema: {};
        }, {
            derive: {};
            resolve: {};
            schema: {};
        }>;
        google: <const Path extends string = "/google", const Callback extends string = `${Path}/callback`>(config: Prettify<{
            clientId: string;
            clientSecret: string;
            redirectUri: string;
            scope?: string[];
            accessType?: "online" | "offline";
        } & {
            path?: Path | undefined;
            callback?: Callback | undefined;
            createUser?: ((user: import("@lucia-auth/oauth/providers").GoogleUser) => (Record<string, unknown> & {
                id: string | number;
            }) | Promise<Record<string, unknown> & {
                id: string | number;
            }>) | undefined;
            hook?: {
                redirect?: LocalHook<any, any, any, any, any, any, any>;
                callback?: LocalHook<any, any, any, any, any, any, any>;
            };
            cookie?: {
                state?: CookieOptions;
                session?: CookieOptions;
            };
        }>) => Elysia<"", false, {
            decorator: {};
            store: {};
            derive: {};
            resolve: {};
        }, {
            type: {};
            error: {};
        }, {
            schema: {};
            macro: {};
            macroFn: {};
        }, {
            [x: string]: {
                get: {
                    body: unknown;
                    params: {};
                    query: unknown;
                    headers: unknown;
                    response: {
                        [x: string]: any;
                        200: any;
                    };
                };
            };
        } & {
            [x: string]: {
                get: {
                    body: unknown;
                    params: {};
                    query: unknown;
                    headers: unknown;
                    response: {
                        [x: string]: any;
                        200: any;
                    };
                };
            };
        }, {
            derive: {};
            resolve: {};
            schema: {};
        }, {
            derive: {};
            resolve: {};
            schema: {};
        }>;
        lichless: <const Path extends string = "/lichess", const Callback_1 extends string = `${Path}/callback`>(config: {
            path?: Path | undefined;
            callback?: Callback_1 | undefined;
            createUser?: ((user: import("@lucia-auth/oauth/providers").LichessUser) => (Record<string, unknown> & {
                id: string | number;
            }) | Promise<Record<string, unknown> & {
                id: string | number;
            }>) | undefined;
            hook?: {
                redirect?: LocalHook<any, any, any, any, any, any, any>;
                callback?: LocalHook<any, any, any, any, any, any, any>;
            };
            cookie?: {
                state?: CookieOptions;
                session?: CookieOptions;
            };
            config: {
                clientId: string;
                redirectUri: string;
                scope?: string[];
            };
        }) => Elysia<"", false, {
            decorator: {};
            store: {};
            derive: {};
            resolve: {};
        }, {
            type: {};
            error: {};
        }, {
            schema: {};
            macro: {};
            macroFn: {};
        }, ({
            lichess: {
                get: {
                    body: unknown;
                    params: { [Param in import("elysia/dist/types").GetPathParameter<Path> as Param extends `${string}?` ? never : Param]: string; } & { [Param_1 in import("elysia/dist/types").GetPathParameter<Path> as Param_1 extends `${infer OptionalParam}?` ? OptionalParam : never]?: string | undefined; } extends infer T ? { [K in keyof T]: ({ [Param in import("elysia/dist/types").GetPathParameter<Path> as Param extends `${string}?` ? never : Param]: string; } & { [Param_1 in import("elysia/dist/types").GetPathParameter<Path> as Param_1 extends `${infer OptionalParam}?` ? OptionalParam : never]?: string | undefined; })[K]; } : never;
                    query: unknown;
                    headers: unknown;
                    response: {
                        [x: string]: any;
                        200: any;
                    };
                };
            };
        } | ({} & import("elysia").CreateEden<`${Path extends "/" ? "/index" : Path extends "" ? Path : Path extends `/${string}` ? Path : Path}`, {
            get: {
                body: unknown;
                params: { [Param in import("elysia/dist/types").GetPathParameter<Path> as Param extends `${string}?` ? never : Param]: string; } & { [Param_1 in import("elysia/dist/types").GetPathParameter<Path> as Param_1 extends `${infer OptionalParam}?` ? OptionalParam : never]?: string | undefined; } extends infer T ? { [K in keyof T]: ({ [Param in import("elysia/dist/types").GetPathParameter<Path> as Param extends `${string}?` ? never : Param]: string; } & { [Param_1 in import("elysia/dist/types").GetPathParameter<Path> as Param_1 extends `${infer OptionalParam}?` ? OptionalParam : never]?: string | undefined; })[K]; } : never;
                query: unknown;
                headers: unknown;
                response: {
                    [x: string]: any;
                    200: any;
                };
            };
        }>)) & (import("elysia").CreateEden<`${Callback_1 extends "/" ? "/index" : Callback_1 extends "" ? Callback_1 : Callback_1 extends `/${string}` ? Callback_1 : Callback_1}`, {
            get: {
                body: unknown;
                params: { [Param_2 in import("elysia/dist/types").GetPathParameter<Callback_1> as Param_2 extends `${string}?` ? never : Param_2]: string; } & { [Param_3 in import("elysia/dist/types").GetPathParameter<Callback_1> as Param_3 extends `${infer OptionalParam}?` ? OptionalParam : never]?: string | undefined; } extends infer T_1 ? { [K_1 in keyof T_1]: ({ [Param_2 in import("elysia/dist/types").GetPathParameter<Callback_1> as Param_2 extends `${string}?` ? never : Param_2]: string; } & { [Param_3 in import("elysia/dist/types").GetPathParameter<Callback_1> as Param_3 extends `${infer OptionalParam}?` ? OptionalParam : never]?: string | undefined; })[K_1]; } : never;
                query: unknown;
                headers: unknown;
                response: {
                    [x: string]: any;
                    200: any;
                };
            };
        }> | {
            lichess: {
                callback: {
                    get: {
                        body: unknown;
                        params: { [Param_2 in import("elysia/dist/types").GetPathParameter<Callback_1> as Param_2 extends `${string}?` ? never : Param_2]: string; } & { [Param_3 in import("elysia/dist/types").GetPathParameter<Callback_1> as Param_3 extends `${infer OptionalParam}?` ? OptionalParam : never]?: string | undefined; } extends infer T_1 ? { [K_1 in keyof T_1]: ({ [Param_2 in import("elysia/dist/types").GetPathParameter<Callback_1> as Param_2 extends `${string}?` ? never : Param_2]: string; } & { [Param_3 in import("elysia/dist/types").GetPathParameter<Callback_1> as Param_3 extends `${infer OptionalParam}?` ? OptionalParam : never]?: string | undefined; })[K_1]; } : never;
                        query: unknown;
                        headers: unknown;
                        response: {
                            [x: string]: any;
                            200: any;
                        };
                    };
                };
            };
        }), {
            derive: {};
            resolve: {};
            schema: {};
        }, {
            derive: {};
            resolve: {};
            schema: {};
        }>;
        line: <const Path extends string = "/line", const Callback extends string = `${Path}/callback`>(config: Prettify<{
            clientId: string;
            clientSecret: string;
            redirectUri: string;
            scope?: string[];
        } & {
            path?: Path | undefined;
            callback?: Callback | undefined;
            createUser?: ((user: import("@lucia-auth/oauth/providers").LineUser) => (Record<string, unknown> & {
                id: string | number;
            }) | Promise<Record<string, unknown> & {
                id: string | number;
            }>) | undefined;
            hook?: {
                redirect?: LocalHook<any, any, any, any, any, any, any>;
                callback?: LocalHook<any, any, any, any, any, any, any>;
            };
            cookie?: {
                state?: CookieOptions;
                session?: CookieOptions;
            };
        }>) => Elysia<"", false, {
            decorator: {};
            store: {};
            derive: {};
            resolve: {};
        }, {
            type: {};
            error: {};
        }, {
            schema: {};
            macro: {};
            macroFn: {};
        }, {
            [x: string]: {
                get: {
                    body: unknown;
                    params: {};
                    query: unknown;
                    headers: unknown;
                    response: {
                        [x: string]: any;
                        200: any;
                    };
                };
            };
        } & {
            [x: string]: {
                get: {
                    body: unknown;
                    params: {};
                    query: unknown;
                    headers: unknown;
                    response: {
                        [x: string]: any;
                        200: any;
                    };
                };
            };
        }, {
            derive: {};
            resolve: {};
            schema: {};
        }, {
            derive: {};
            resolve: {};
            schema: {};
        }>;
        linkedIn: <const Path extends string = "/linkedIn", const Callback extends string = `${Path}/callback`>(config: Prettify<{
            clientId: string;
            clientSecret: string;
            redirectUri: string;
            scope?: string[];
        } & {
            path?: Path | undefined;
            callback?: Callback | undefined;
            createUser?: ((user: import("@lucia-auth/oauth/providers").LinkedInUser) => (Record<string, unknown> & {
                id: string | number;
            }) | Promise<Record<string, unknown> & {
                id: string | number;
            }>) | undefined;
            hook?: {
                redirect?: LocalHook<any, any, any, any, any, any, any>;
                callback?: LocalHook<any, any, any, any, any, any, any>;
            };
            cookie?: {
                state?: CookieOptions;
                session?: CookieOptions;
            };
        }>) => Elysia<"", false, {
            decorator: {};
            store: {};
            derive: {};
            resolve: {};
        }, {
            type: {};
            error: {};
        }, {
            schema: {};
            macro: {};
            macroFn: {};
        }, {
            [x: string]: {
                get: {
                    body: unknown;
                    params: {};
                    query: unknown;
                    headers: unknown;
                    response: {
                        [x: string]: any;
                        200: any;
                    };
                };
            };
        } & {
            [x: string]: {
                get: {
                    body: unknown;
                    params: {};
                    query: unknown;
                    headers: unknown;
                    response: {
                        [x: string]: any;
                        200: any;
                    };
                };
            };
        }, {
            derive: {};
            resolve: {};
            schema: {};
        }, {
            derive: {};
            resolve: {};
            schema: {};
        }>;
        osu: <const Path extends string = "/osu", const Callback extends string = `${Path}/callback`>(config: Prettify<{
            clientId: string;
            clientSecret: string;
            redirectUri: string;
            scope?: string[];
        } & {
            path?: Path | undefined;
            callback?: Callback | undefined;
            createUser?: ((user: import("@lucia-auth/oauth/providers").OsuUser) => (Record<string, unknown> & {
                id: string | number;
            }) | Promise<Record<string, unknown> & {
                id: string | number;
            }>) | undefined;
            hook?: {
                redirect?: LocalHook<any, any, any, any, any, any, any>;
                callback?: LocalHook<any, any, any, any, any, any, any>;
            };
            cookie?: {
                state?: CookieOptions;
                session?: CookieOptions;
            };
        }>) => Elysia<"", false, {
            decorator: {};
            store: {};
            derive: {};
            resolve: {};
        }, {
            type: {};
            error: {};
        }, {
            schema: {};
            macro: {};
            macroFn: {};
        }, {
            [x: string]: {
                get: {
                    body: unknown;
                    params: {};
                    query: unknown;
                    headers: unknown;
                    response: {
                        [x: string]: any;
                        200: any;
                    };
                };
            };
        } & {
            [x: string]: {
                get: {
                    body: unknown;
                    params: {};
                    query: unknown;
                    headers: unknown;
                    response: {
                        [x: string]: any;
                        200: any;
                    };
                };
            };
        }, {
            derive: {};
            resolve: {};
            schema: {};
        }, {
            derive: {};
            resolve: {};
            schema: {};
        }>;
        patreon: <const Path extends string = "/patreon", const Callback extends string = `${Path}/callback`>(config: Prettify<{
            clientId: string;
            clientSecret: string;
            redirectUri: string;
            scope?: string[];
        } & {
            path?: Path | undefined;
            callback?: Callback | undefined;
            createUser?: ((user: import("@lucia-auth/oauth/providers").PatreonUser) => (Record<string, unknown> & {
                id: string | number;
            }) | Promise<Record<string, unknown> & {
                id: string | number;
            }>) | undefined;
            hook?: {
                redirect?: LocalHook<any, any, any, any, any, any, any>;
                callback?: LocalHook<any, any, any, any, any, any, any>;
            };
            cookie?: {
                state?: CookieOptions;
                session?: CookieOptions;
            };
        }>) => Elysia<"", false, {
            decorator: {};
            store: {};
            derive: {};
            resolve: {};
        }, {
            type: {};
            error: {};
        }, {
            schema: {};
            macro: {};
            macroFn: {};
        }, {
            [x: string]: {
                get: {
                    body: unknown;
                    params: {};
                    query: unknown;
                    headers: unknown;
                    response: {
                        [x: string]: any;
                        200: any;
                    };
                };
            };
        } & {
            [x: string]: {
                get: {
                    body: unknown;
                    params: {};
                    query: unknown;
                    headers: unknown;
                    response: {
                        [x: string]: any;
                        200: any;
                    };
                };
            };
        }, {
            derive: {};
            resolve: {};
            schema: {};
        }, {
            derive: {};
            resolve: {};
            schema: {};
        }>;
        reddit: <const Path extends string = "/reddit", const Callback extends string = `${Path}/callback`>(config: Prettify<{
            clientId: string;
            clientSecret: string;
            redirectUri: string;
            scope?: string[];
            tokenDuration: "permanent" | "temporary";
        } & {
            path?: Path | undefined;
            callback?: Callback | undefined;
            createUser?: ((user: import("@lucia-auth/oauth/providers").RedditUser) => (Record<string, unknown> & {
                id: string | number;
            }) | Promise<Record<string, unknown> & {
                id: string | number;
            }>) | undefined;
            hook?: {
                redirect?: LocalHook<any, any, any, any, any, any, any>;
                callback?: LocalHook<any, any, any, any, any, any, any>;
            };
            cookie?: {
                state?: CookieOptions;
                session?: CookieOptions;
            };
        }>) => Elysia<"", false, {
            decorator: {};
            store: {};
            derive: {};
            resolve: {};
        }, {
            type: {};
            error: {};
        }, {
            schema: {};
            macro: {};
            macroFn: {};
        }, {
            [x: string]: {
                get: {
                    body: unknown;
                    params: {};
                    query: unknown;
                    headers: unknown;
                    response: {
                        [x: string]: any;
                        200: any;
                    };
                };
            };
        } & {
            [x: string]: {
                get: {
                    body: unknown;
                    params: {};
                    query: unknown;
                    headers: unknown;
                    response: {
                        [x: string]: any;
                        200: any;
                    };
                };
            };
        }, {
            derive: {};
            resolve: {};
            schema: {};
        }, {
            derive: {};
            resolve: {};
            schema: {};
        }>;
        salesforce: <const Path extends string = "/salesforce", const Callback extends string = `${Path}/callback`>(config: Prettify<{
            clientId: string;
            clientSecret: string;
            redirectUri: string;
            scope?: string[];
        } & {
            path?: Path | undefined;
            callback?: Callback | undefined;
            createUser?: ((user: import("@lucia-auth/oauth/providers").SalesforceUser) => (Record<string, unknown> & {
                id: string | number;
            }) | Promise<Record<string, unknown> & {
                id: string | number;
            }>) | undefined;
            hook?: {
                redirect?: LocalHook<any, any, any, any, any, any, any>;
                callback?: LocalHook<any, any, any, any, any, any, any>;
            };
            cookie?: {
                state?: CookieOptions;
                session?: CookieOptions;
            };
        }>) => Elysia<"", false, {
            decorator: {};
            store: {};
            derive: {};
            resolve: {};
        }, {
            type: {};
            error: {};
        }, {
            schema: {};
            macro: {};
            macroFn: {};
        }, {
            [x: string]: {
                get: {
                    body: unknown;
                    params: {};
                    query: unknown;
                    headers: unknown;
                    response: {
                        [x: string]: any;
                        200: any;
                    };
                };
            };
        } & {
            [x: string]: {
                get: {
                    body: unknown;
                    params: {};
                    query: unknown;
                    headers: unknown;
                    response: {
                        [x: string]: any;
                        200: any;
                    };
                };
            };
        }, {
            derive: {};
            resolve: {};
            schema: {};
        }, {
            derive: {};
            resolve: {};
            schema: {};
        }>;
        slack: <const Path extends string = "/slack", const Callback extends string = `${Path}/callback`>(config: Prettify<{
            clientId: string;
            clientSecret: string;
            redirectUri: string;
            scope?: string[];
        } & {
            path?: Path | undefined;
            callback?: Callback | undefined;
            createUser?: ((user: import("@lucia-auth/oauth/providers").SlackUser) => (Record<string, unknown> & {
                id: string | number;
            }) | Promise<Record<string, unknown> & {
                id: string | number;
            }>) | undefined;
            hook?: {
                redirect?: LocalHook<any, any, any, any, any, any, any>;
                callback?: LocalHook<any, any, any, any, any, any, any>;
            };
            cookie?: {
                state?: CookieOptions;
                session?: CookieOptions;
            };
        }>) => Elysia<"", false, {
            decorator: {};
            store: {};
            derive: {};
            resolve: {};
        }, {
            type: {};
            error: {};
        }, {
            schema: {};
            macro: {};
            macroFn: {};
        }, {
            [x: string]: {
                get: {
                    body: unknown;
                    params: {};
                    query: unknown;
                    headers: unknown;
                    response: {
                        [x: string]: any;
                        200: any;
                    };
                };
            };
        } & {
            [x: string]: {
                get: {
                    body: unknown;
                    params: {};
                    query: unknown;
                    headers: unknown;
                    response: {
                        [x: string]: any;
                        200: any;
                    };
                };
            };
        }, {
            derive: {};
            resolve: {};
            schema: {};
        }, {
            derive: {};
            resolve: {};
            schema: {};
        }>;
        spotify: <const Path extends string = "/spotify", const Callback extends string = `${Path}/callback`>(config: Prettify<{
            clientId: string;
            clientSecret: string;
            redirectUri: string;
            scope?: string[];
        } & {
            path?: Path | undefined;
            callback?: Callback | undefined;
            createUser?: ((user: import("@lucia-auth/oauth/providers").SpotifyUser) => (Record<string, unknown> & {
                id: string | number;
            }) | Promise<Record<string, unknown> & {
                id: string | number;
            }>) | undefined;
            hook?: {
                redirect?: LocalHook<any, any, any, any, any, any, any>;
                callback?: LocalHook<any, any, any, any, any, any, any>;
            };
            cookie?: {
                state?: CookieOptions;
                session?: CookieOptions;
            };
        }>) => Elysia<"", false, {
            decorator: {};
            store: {};
            derive: {};
            resolve: {};
        }, {
            type: {};
            error: {};
        }, {
            schema: {};
            macro: {};
            macroFn: {};
        }, {
            [x: string]: {
                get: {
                    body: unknown;
                    params: {};
                    query: unknown;
                    headers: unknown;
                    response: {
                        [x: string]: any;
                        200: any;
                    };
                };
            };
        } & {
            [x: string]: {
                get: {
                    body: unknown;
                    params: {};
                    query: unknown;
                    headers: unknown;
                    response: {
                        [x: string]: any;
                        200: any;
                    };
                };
            };
        }, {
            derive: {};
            resolve: {};
            schema: {};
        }, {
            derive: {};
            resolve: {};
            schema: {};
        }>;
        twitch: <const Path extends string = "/twitch", const Callback extends string = `${Path}/callback`>(config: Prettify<{
            clientId: string;
            clientSecret: string;
            scope?: string[];
            redirectUri: string;
        } & {
            path?: Path | undefined;
            callback?: Callback | undefined;
            createUser?: ((user: import("@lucia-auth/oauth/providers").TwitchUser) => (Record<string, unknown> & {
                id: string | number;
            }) | Promise<Record<string, unknown> & {
                id: string | number;
            }>) | undefined;
            hook?: {
                redirect?: LocalHook<any, any, any, any, any, any, any>;
                callback?: LocalHook<any, any, any, any, any, any, any>;
            };
            cookie?: {
                state?: CookieOptions;
                session?: CookieOptions;
            };
        }>) => Elysia<"", false, {
            decorator: {};
            store: {};
            derive: {};
            resolve: {};
        }, {
            type: {};
            error: {};
        }, {
            schema: {};
            macro: {};
            macroFn: {};
        }, {
            [x: string]: {
                get: {
                    body: unknown;
                    params: {};
                    query: unknown;
                    headers: unknown;
                    response: {
                        [x: string]: any;
                        200: any;
                    };
                };
            };
        } & {
            [x: string]: {
                get: {
                    body: unknown;
                    params: {};
                    query: unknown;
                    headers: unknown;
                    response: {
                        [x: string]: any;
                        200: any;
                    };
                };
            };
        }, {
            derive: {};
            resolve: {};
            schema: {};
        }, {
            derive: {};
            resolve: {};
            schema: {};
        }>;
        twitter: <const Path extends string = "/twitter", const Callback_1 extends string = `${Path}/callback`>(config: {
            path?: Path | undefined;
            callback?: Callback_1 | undefined;
            createUser?: ((user: import("@lucia-auth/oauth/providers").TwitterUser) => (Record<string, unknown> & {
                id: string | number;
            }) | Promise<Record<string, unknown> & {
                id: string | number;
            }>) | undefined;
            hook?: {
                redirect?: LocalHook<any, any, any, any, any, any, any>;
                callback?: LocalHook<any, any, any, any, any, any, any>;
            };
            cookie?: {
                state?: CookieOptions;
                session?: CookieOptions;
            };
            config: {
                clientId: string;
                clientSecret: string;
                redirectUri: string;
                scope?: string[];
            };
        }) => Elysia<"", false, {
            decorator: {};
            store: {};
            derive: {};
            resolve: {};
        }, {
            type: {};
            error: {};
        }, {
            schema: {};
            macro: {};
            macroFn: {};
        }, ({
            twitter: {
                get: {
                    body: unknown;
                    params: { [Param in import("elysia/dist/types").GetPathParameter<Path> as Param extends `${string}?` ? never : Param]: string; } & { [Param_1 in import("elysia/dist/types").GetPathParameter<Path> as Param_1 extends `${infer OptionalParam}?` ? OptionalParam : never]?: string | undefined; } extends infer T ? { [K in keyof T]: ({ [Param in import("elysia/dist/types").GetPathParameter<Path> as Param extends `${string}?` ? never : Param]: string; } & { [Param_1 in import("elysia/dist/types").GetPathParameter<Path> as Param_1 extends `${infer OptionalParam}?` ? OptionalParam : never]?: string | undefined; })[K]; } : never;
                    query: unknown;
                    headers: unknown;
                    response: {
                        [x: string]: any;
                        200: any;
                    };
                };
            };
        } | ({} & import("elysia").CreateEden<`${Path extends "/" ? "/index" : Path extends "" ? Path : Path extends `/${string}` ? Path : Path}`, {
            get: {
                body: unknown;
                params: { [Param in import("elysia/dist/types").GetPathParameter<Path> as Param extends `${string}?` ? never : Param]: string; } & { [Param_1 in import("elysia/dist/types").GetPathParameter<Path> as Param_1 extends `${infer OptionalParam}?` ? OptionalParam : never]?: string | undefined; } extends infer T ? { [K in keyof T]: ({ [Param in import("elysia/dist/types").GetPathParameter<Path> as Param extends `${string}?` ? never : Param]: string; } & { [Param_1 in import("elysia/dist/types").GetPathParameter<Path> as Param_1 extends `${infer OptionalParam}?` ? OptionalParam : never]?: string | undefined; })[K]; } : never;
                query: unknown;
                headers: unknown;
                response: {
                    [x: string]: any;
                    200: any;
                };
            };
        }>)) & (import("elysia").CreateEden<`${Callback_1 extends "/" ? "/index" : Callback_1 extends "" ? Callback_1 : Callback_1 extends `/${string}` ? Callback_1 : Callback_1}`, {
            get: {
                body: unknown;
                params: { [Param_2 in import("elysia/dist/types").GetPathParameter<Callback_1> as Param_2 extends `${string}?` ? never : Param_2]: string; } & { [Param_3 in import("elysia/dist/types").GetPathParameter<Callback_1> as Param_3 extends `${infer OptionalParam}?` ? OptionalParam : never]?: string | undefined; } extends infer T_1 ? { [K_1 in keyof T_1]: ({ [Param_2 in import("elysia/dist/types").GetPathParameter<Callback_1> as Param_2 extends `${string}?` ? never : Param_2]: string; } & { [Param_3 in import("elysia/dist/types").GetPathParameter<Callback_1> as Param_3 extends `${infer OptionalParam}?` ? OptionalParam : never]?: string | undefined; })[K_1]; } : never;
                query: unknown;
                headers: unknown;
                response: {
                    [x: string]: any;
                    200: any;
                };
            };
        }> | {
            twitter: {
                callback: {
                    get: {
                        body: unknown;
                        params: { [Param_2 in import("elysia/dist/types").GetPathParameter<Callback_1> as Param_2 extends `${string}?` ? never : Param_2]: string; } & { [Param_3 in import("elysia/dist/types").GetPathParameter<Callback_1> as Param_3 extends `${infer OptionalParam}?` ? OptionalParam : never]?: string | undefined; } extends infer T_1 ? { [K_1 in keyof T_1]: ({ [Param_2 in import("elysia/dist/types").GetPathParameter<Callback_1> as Param_2 extends `${string}?` ? never : Param_2]: string; } & { [Param_3 in import("elysia/dist/types").GetPathParameter<Callback_1> as Param_3 extends `${infer OptionalParam}?` ? OptionalParam : never]?: string | undefined; })[K_1]; } : never;
                        query: unknown;
                        headers: unknown;
                        response: {
                            [x: string]: any;
                            200: any;
                        };
                    };
                };
            };
        }), {
            derive: {};
            resolve: {};
            schema: {};
        }, {
            derive: {};
            resolve: {};
            schema: {};
        }>;
    };
};
export default Lucia;
