version: "3.8"

services:
  # PostgreSQL Database (Neon serverless replacement for development)
  database:
    image: postgres:16-alpine
    container_name: deepweb-postgres
    environment:
      POSTGRES_DB: deepweb_ai
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../database/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis for caching (DragonflyDB alternative)
  redis:
    image: redis:7-alpine
    container_name: deepweb-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # MinIO for S3-compatible storage
  minio:
    image: minio/minio:latest
    container_name: deepweb-minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Backend (Elysia.js)
  backend:
    build:
      context: ../packages/backend
      dockerfile: Dockerfile
    container_name: deepweb-backend
    environment:
      DATABASE_URL: postgresql://postgres:postgres@database:5432/deepweb_ai
      REDIS_URL: redis://redis:6379
      NODE_ENV: development
      PORT: 3001
    ports:
      - "3001:3001"
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ../packages/backend:/app
      - /app/node_modules
    command: pnpm dev
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Frontend (React + Vite)
  frontend:
    build:
      context: ../packages/frontend
      dockerfile: Dockerfile
    container_name: deepweb-frontend
    environment:
      VITE_API_URL: http://localhost:3001
      NODE_ENV: development
    ports:
      - "3000:3000"
    volumes:
      - ../packages/frontend:/app
      - /app/node_modules
    command: pnpm dev --host 0.0.0.0
    depends_on:
      - backend

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: deepweb-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"

  # Grafana for observability
  grafana:
    image: grafana/grafana:latest
    container_name: deepweb-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    ports:
      - "3002:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus

  # Triton Inference Server for AI models
  triton:
    image: nvcr.io/nvidia/tritonserver:23.12-py3
    container_name: deepweb-triton
    ports:
      - "8000:8000"
      - "8001:8001"
      - "8002:8002"
    volumes:
      - ./models:/models
    command: tritonserver --model-repository=/models
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

volumes:
  postgres_data:
  redis_data:
  minio_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    driver: bridge
